<?php

declare(strict_types=1);

namespace Page;

/**
 * The configuration provider for the Page module
 *
 * @see https://docs.zendframework.com/zend-component-installer/
 */
class ConfigProvider
{
    /**
     * Returns the configuration array
     *
     * To add a bit of a structure, each section is defined in a separate
     * method which returns an array with its configuration.
     */
    public function __invoke() : array
    {
        return [
            'dependencies' => $this->getDependencies(),
            'templates'    => $this->getTemplates(),
            'routes'       => $this->getRoutes(),
        ];
    }

    /**
     * Returns the container dependencies
     */
    public function getDependencies() : array
    {
        return [
            'invokables' => [
            ],
            'factories'  => [
                Handler\PageHandler::class => Handler\PageHandlerFactory::class,
            ],
            'delegators' => [
                \Zend\Expressive\Application::class => [
                    \Zend\Expressive\Container\ApplicationConfigInjectionDelegator::class,
                ],
            ],
        ];
    }

    /**
     * Returns the templates configuration
     */
    public function getTemplates() : array
    {
        return [
            'paths' => [
                'page'    => [__DIR__ . '/../templates/'],
            ],
        ];
    }
    
    /**
     * Returns the routes configuration
     */
    public function getRoutes() : array
    {
        return [
            [
                'name' => 'pages',
                // 'path' => '/[{lang:[a-z]{2}}[/[{page:.+}]]]',
                'path' => '/cms/pages[{page}]',
                'middleware' => Handler\PageHandler::class,
                'allowed_methods' => ['GET'],
            ],
            [
                'name' => 'home',
                'path' => '/',
                'middleware' => Handler\PageHandler::class,
                /*'allowed_methods' => ['GET', 'POST', 'PATCH'],
                'options' => [
                'stuff' => 'to',
                'pass'  => 'to',
                'the'   => 'underlying router',
                ],*/
            ],
        ];
    }
}
